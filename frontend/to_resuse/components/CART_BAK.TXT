 
 
// App structure:

// ShoppingCartApp
//   Header
//     Navigation
//     ShoppingCart
//   ShoppingCartOverlay
//     ShoppingCartProduct
//     ShoppingCartTotal
//   ProductList
//     Product
// */

 class ShoppingCartApp extends Component {
   constructor(props) {
     super(props);
     this.state = {
       items: this.props.items,
       quantity: 0,
       amountToPay: 0,
       itemsInCart: [],
     };
     this.addToCart = this.addToCart.bind(this);
     this.removeFromCart = this.removeFromCart.bind(this);
     this.handleItemClick = this.handleItemClick.bind(this);  Binding the method
   }

   async handleItemClick(itemId) {
     try {
       const response = await api.post("store/cart/", { itemId });

       if (response.ok) {
          Handle success
         console.log(response.data);
         console.log("POST request successful");
       } else {
          Handle error
         console.error("POST request failed");
       }
     } catch (error) {
       console.error("Error:", error);
     }
   }

      return (
        <div>
          {/* Your cart items rendering logic */}
          <button onClick={() => handleItemClick(item.id)}>Click me</button>
        </div>
      );
    };

   addToCart(item) {
     let itemsInCart = this.state.itemsInCart;
     itemsInCart.push(this.props.items[item.id]);
     this.props.items[item.id].inCart = true;
     this.props.items[item.id].quantityInCart = 1;
     this.setState({
       quantity: this.state.quantity + 1,
       amountToPay: this.state.amountToPay + this.props.items[item.id].price,
       itemsInCart: itemsInCart,
       items: this.props.items,
     });
   }
   removeFromCart(item, indexInCart) {
     let itemsInCart = this.state.itemsInCart;
     this.props.items[item.id].inCart = false;
     this.props.items[item.id].quantityInCart = 0;
     itemsInCart.splice(indexInCart, 1);
     this.setState({
       quantity: this.state.quantity - 1,
       amountToPay: this.state.amountToPay - this.props.items[item.id].price,
       itemsInCart: itemsInCart,
       items: this.props.items,
     });
   }
   render() {
     return (
       <main>
         <Header
           quantity={this.state.quantity}
           amountToPay={this.state.amountToPay}
         />
         <ShoppingCartOverlay
           data={this.state}
           removeFromCart={this.removeFromCart}
         />
         <ProductList
           items={this.props.items}
           addToCart={this.handleItemClick}
         />
       </main>
     );
   }
 }

 export default ShoppingCartApp;
